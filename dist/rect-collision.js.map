{"version":3,"file":"rect-collision.js","sources":["../src/rectcollision.js"],"sourcesContent":["\r\nexport const GRIDWIDTH = 100;\r\nexport const GRIDHEIGHT = 50;\r\n\r\nfunction bboxCross(bbox1, bbox2) {\r\n    if (bbox1.maxX < bbox2.minX || bbox1.minY > bbox2.maxY || bbox1.minX > bbox2.maxX || bbox1.maxY < bbox2.minY) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// function getItemColRow(item) {\r\n//     const { minX, minY, maxX, maxY } = item;\r\n//     const minCol = Math.floor(minX / GRIDWIDTH), maxCol = Math.ceil(maxX / GRIDWIDTH), minRow = Math.floor(minY / GRIDHEIGHT), maxRow = Math.ceil(maxY / GRIDHEIGHT);\r\n//     return { minCol, maxCol, minRow, maxRow };\r\n// }\r\n\r\nexport class RectCollision {\r\n    constructor() {\r\n        this.gridIndex = new Map();\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        for (let col = -10; col <= 20; col++) {\r\n            for (let row = -10; row <= 20; row++) {\r\n                const grid = {\r\n                    col,\r\n                    row,\r\n                    items: []\r\n                };\r\n                this.gridIndex.set(`${col}_${row}`, grid);\r\n            }\r\n        }\r\n    }\r\n\r\n    insert(item) {\r\n        if (!item) {\r\n            return this;\r\n        }\r\n        if (item._gridIndex) {\r\n            return this;\r\n        }\r\n        item._gridIndex = [];\r\n        const { minX, minY, maxX, maxY } = item;\r\n        const minCol = Math.floor(minX / GRIDWIDTH), maxCol = Math.ceil(maxX / GRIDWIDTH), minRow = Math.floor(minY / GRIDHEIGHT), maxRow = Math.ceil(maxY / GRIDHEIGHT);\r\n        const gridIndex = this.gridIndex;\r\n        for (let col = minCol; col <= maxCol; col++) {\r\n            for (let row = minRow; row <= maxRow; row++) {\r\n                const index = `${col}_${row}`;\r\n                if (!gridIndex.has(index)) {\r\n                    gridIndex.set(index, {\r\n                        col,\r\n                        row,\r\n                        items: []\r\n                    });\r\n                }\r\n                gridIndex.get(index).items.push(item);\r\n                item._gridIndex.push(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(item) {\r\n        if (!item) {\r\n            return this;\r\n        }\r\n        const gridIndex = item._gridIndex;\r\n        if (!gridIndex || !gridIndex.length) {\r\n            delete item._gridIndex;\r\n            return this;\r\n        }\r\n        for (let i = 0, len = gridIndex.length; i < len; i++) {\r\n            const index = gridIndex[i];\r\n            const grid = this.gridIndex.get(index);\r\n            if (!grid) {\r\n                continue;\r\n            }\r\n            const items = grid.items;\r\n            const idx = items.indexOf(item);\r\n            if (idx > -1) {\r\n                item.splice(idx, 1);\r\n            }\r\n        }\r\n        delete item._gridIndex;\r\n        return this;\r\n    }\r\n\r\n    collides(item) {\r\n        if (!item) {\r\n            return false;\r\n        }\r\n        const { minX, minY, maxX, maxY } = item;\r\n        const minCol = Math.floor(minX / GRIDWIDTH), maxCol = Math.ceil(maxX / GRIDWIDTH), minRow = Math.floor(minY / GRIDHEIGHT), maxRow = Math.ceil(maxY / GRIDHEIGHT);\r\n        const cross = bboxCross;\r\n        const gridIndex = this.gridIndex;\r\n        for (let col = minCol; col <= maxCol; col++) {\r\n            for (let row = minRow; row <= maxRow; row++) {\r\n                const index = `${col}_${row}`;\r\n                const grid = gridIndex.get(index);\r\n                if (!grid) {\r\n                    continue;\r\n                }\r\n                const items = grid.items;\r\n                if (!items.length) {\r\n                    continue;\r\n                }\r\n                for (let i = 0, len = items.length; i < len; i++) {\r\n                    if (cross(item, items[i])) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        for (const index of this.gridIndex) {\r\n            const items = index[1].items;\r\n            for (let i = 0, len = items.length; i < len; i++) {\r\n                delete items[i]._gridIndex;\r\n            }\r\n            index[1].items = [];\r\n\r\n        }\r\n        return this;\r\n    }\r\n\r\n    all() {\r\n        const result = [];\r\n        for (const index of this.gridIndex) {\r\n            const items = index[1].items;\r\n            if (!items || !items.length) {\r\n                continue;\r\n            }\r\n            for (let i = 0, len = items.length; i < len; i++) {\r\n                const item = items[i];\r\n                if (result.indexOf(item) === -1) {\r\n                    result.push(item);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"],"names":["GRIDWIDTH","GRIDHEIGHT","bboxCross","bbox1","bbox2","maxX","minX","minY","maxY","RectCollision","gridIndex","Map","init","col","row","grid","items","set","insert","item","_gridIndex","minCol","Math","floor","maxCol","ceil","minRow","maxRow","index","has","get","push","remove","length","i","len","idx","indexOf","splice","collides","cross","clear","all","result"],"mappings":"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"}