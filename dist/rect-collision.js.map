{"version":3,"file":"rect-collision.js","sources":["../src/rectcollision.js"],"sourcesContent":["\r\nexport const GRIDWIDTH = 100;\r\nexport const GRIDHEIGHT = 50;\r\n\r\nfunction bboxCross(bbox1, bbox2) {\r\n    return !(bbox1.maxX < bbox2.minX || bbox1.minY > bbox2.maxY || bbox1.minX > bbox2.maxX || bbox1.maxY < bbox2.minY);\r\n}\r\n\r\n// function getItemColRow(item) {\r\n//     const { minX, minY, maxX, maxY } = item;\r\n//     const minCol = Math.floor(minX / GRIDWIDTH), maxCol = Math.ceil(maxX / GRIDWIDTH), minRow = Math.floor(minY / GRIDHEIGHT), maxRow = Math.ceil(maxY / GRIDHEIGHT);\r\n//     return { minCol, maxCol, minRow, maxRow };\r\n// }\r\n\r\nexport class RectCollision {\r\n    constructor() {\r\n        this.gridIndex = new Map();\r\n        this.items = [];\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        for (let col = -10; col <= 20; col++) {\r\n            for (let row = -10; row <= 20; row++) {\r\n                const grid = {\r\n                    col,\r\n                    row,\r\n                    index: []\r\n                };\r\n                this.gridIndex.set(`${col}_${row}`, grid);\r\n            }\r\n        }\r\n    }\r\n\r\n    insert(item) {\r\n        if (!item) {\r\n            return this;\r\n        }\r\n        if (item._insert) {\r\n            return this;\r\n        }\r\n        item._insert = true;\r\n        const { minX, minY, maxX, maxY } = item;\r\n        const minCol = Math.floor(minX / GRIDWIDTH), maxCol = Math.ceil(maxX / GRIDWIDTH), minRow = Math.floor(minY / GRIDHEIGHT), maxRow = Math.ceil(maxY / GRIDHEIGHT);\r\n        const gridIndex = this.gridIndex;\r\n        const len = this.items.push(item);\r\n        let row = minRow;\r\n        for (let col = minCol; col <= maxCol; col++) {\r\n            row = minRow;\r\n            for (; row <= maxRow; row++) {\r\n                const index = `${col}_${row}`;\r\n                if (col < -10 || col > 20 || row < -10 || row > 20) {\r\n                    if (!gridIndex.has(index)) {\r\n                        gridIndex.set(index, {\r\n                            col,\r\n                            row,\r\n                            index: []\r\n                        });\r\n                    }\r\n                }\r\n                gridIndex.get(index).index.push(len - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // remove(item) {\r\n    //     if (!item) {\r\n    //         return this;\r\n    //     }\r\n    //     const gridIndex = item._gridIndex;\r\n    //     if (!gridIndex || !gridIndex.length) {\r\n    //         delete item._gridIndex;\r\n    //         return this;\r\n    //     }\r\n    //     for (let i = 0, len = gridIndex.length; i < len; i++) {\r\n    //         const index = gridIndex[i];\r\n    //         const grid = this.gridIndex.get(index);\r\n    //         if (!grid) {\r\n    //             continue;\r\n    //         }\r\n    //         const items = grid.items;\r\n    //         const idx = items.indexOf(item);\r\n    //         if (idx > -1) {\r\n    //             item.splice(idx, 1);\r\n    //         }\r\n    //     }\r\n    //     delete item._gridIndex;\r\n    //     return this;\r\n    // }\r\n\r\n    collides(item) {\r\n        if (!item) {\r\n            return false;\r\n        }\r\n        const { minX, minY, maxX, maxY } = item;\r\n        const minCol = Math.floor(minX / GRIDWIDTH), maxCol = Math.ceil(maxX / GRIDWIDTH), minRow = Math.floor(minY / GRIDHEIGHT), maxRow = Math.ceil(maxY / GRIDHEIGHT);\r\n        const cross = bboxCross;\r\n        const gridIndex = this.gridIndex;\r\n        let row = minRow;\r\n        for (let col = minCol; col <= maxCol; col++) {\r\n            row = minRow;\r\n            for (; row <= maxRow; row++) {\r\n                const gridIdx = `${col}_${row}`;\r\n                const grid = gridIndex.get(gridIdx);\r\n                if (!grid) {\r\n                    continue;\r\n                }\r\n                const index = grid.index;\r\n                if (!index.length) {\r\n                    continue;\r\n                }\r\n                for (let i = 0, len = index.length; i < len; i++) {\r\n                    const idx = index[i];\r\n                    if (cross(item, this.items[idx])) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        for (const gIndex of this.gridIndex) {\r\n            gIndex[1].index = [];\r\n        }\r\n        for (let i = 0, len = this.items.length; i < len; i++) {\r\n            delete this.items[i]._insert;\r\n        }\r\n        this.items = [];\r\n        return this;\r\n    }\r\n\r\n    all() {\r\n        return this.items;\r\n        // const result = [];\r\n        // for (const index of this.gridIndex) {\r\n        //     const items = index[1].items;\r\n        //     if (!items || !items.length) {\r\n        //         continue;\r\n        //     }\r\n        //     for (let i = 0, len = items.length; i < len; i++) {\r\n        //         const item = items[i];\r\n        //         if (result.indexOf(item) === -1) {\r\n        //             result.push(item);\r\n        //         }\r\n        //     }\r\n        // }\r\n        // return result;\r\n    }\r\n}\r\n"],"names":["GRIDWIDTH","GRIDHEIGHT","bboxCross","bbox1","bbox2","maxX","minX","minY","maxY","RectCollision","gridIndex","Map","items","init","col","row","grid","index","set","insert","item","_insert","minCol","Math","floor","maxCol","ceil","minRow","maxRow","len","push","has","get","collides","cross","gridIdx","length","i","idx","clear","gIndex","all"],"mappings":"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"}